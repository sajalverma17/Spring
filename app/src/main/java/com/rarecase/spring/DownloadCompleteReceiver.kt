package com.rarecase.spring

import android.app.DownloadManager
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Handler
import android.util.Log
import com.rarecase.model.Song
import com.rarecase.model.SongCacheManager
import com.rarecase.utils.Utils

class DownloadCompleteReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context?, intent: Intent?) {

        if(intent?.action == DownloadManager.ACTION_DOWNLOAD_COMPLETE) {
            if(context?.packageName == "com.rarecase.spring") {
                //Download Ref only used for Logging so far
                val downloadRef = intent?.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1) as Long
                val cursor = (context?.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager).query(DownloadManager.Query().setFilterById(downloadRef))

                if (cursor.moveToFirst()) {
                    val colIndex_LocalUri: Int
                    val colIndex_Status: Int
                    val colIndex_Desc : Int
                    try {
                        colIndex_LocalUri = cursor.getColumnIndexOrThrow(DownloadManager.COLUMN_LOCAL_URI)
                        colIndex_Status = cursor.getColumnIndexOrThrow(DownloadManager.COLUMN_STATUS)
                        colIndex_Desc = cursor.getColumnIndexOrThrow(DownloadManager.COLUMN_DESCRIPTION)
                    } catch (e: IllegalArgumentException) {
                        return
                    }
                    val status = cursor.getInt(colIndex_Status) //Generated by system
                    val songId = cursor.getString(colIndex_Desc) //Added by Spring's SongDownloadManger. Contains pid

                    if (status == DownloadManager.STATUS_SUCCESSFUL) {
                        val fileURI = Uri.parse(cursor.getString(colIndex_LocalUri))
                        Log.i("DownloadComplete", "Download Successful. Destination - " + fileURI.path)
                        val song = getSongDetails(context,songId)
                        if(song != null) {
                            Utils.tagAudioFile(song, song.albumArt, fileURI.path)
                        }
                        Utils.showToastFromService(Handler(), context, "Finished downloading "+song?.song)
                    }
                    else if (status == DownloadManager.STATUS_FAILED) {
                        Log.i("DownloadComplete", "Status of $downloadRef : Failed")
                        Utils.showToastFromService(Handler(), context, "Download failed : "+songId)
                    }
//                    else if (status == DownloadManager.STATUS_PAUSED) {
//                        Log.i("DownloadComplete", "Status of $downloadRef : Paused")
//                        Utils.showToastFromService(Handler(), context, "Retrying download : $downloadRef")
//                    }
//                    else if (status == DownloadManager.STATUS_PENDING){
//                        Log.i("DownloadComplete", "Status of $downloadRef : Pending")
//                        Utils.showToastFromService(Handler(), context, "Pending download : $downloadRef")
//                    }
//                    else if (status == DownloadManager.STATUS_RUNNING){
//                        Log.i("DownloadComplete","Status of $downloadRef : Running")
//                        Utils.showToastFromService(Handler(), context, "Download is running")
//                    }
                    removeSongDetailsFromCache(context,songId)
                    Log.i("DownloadComplete","Song cache removed : "+songId)

                }
                cursor.close()
            }
        }
    }
    private fun getSongDetails(context : Context?, pid : String) : Song?
    {
        return SongCacheManager(context!!).getCachedSong(pid)
    }

    private fun removeSongDetailsFromCache(context: Context?, pid : String)
    {
        SongCacheManager(context!!).deleteCache(pid)
    }
}